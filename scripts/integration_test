#!/bin/bash
set -eEuo pipefail
cd "$(dirname "$(readlink -f "$0")")"

BASH_BUDDY_ROOT="$(readlink -f bash-buddy)"
readonly BASH_BUDDY_ROOT
source "$BASH_BUDDY_ROOT/lib/trap_error_info.sh"
source "$BASH_BUDDY_ROOT/lib/common_utils.sh"
source "$BASH_BUDDY_ROOT/lib/java_utils.sh"
source "$BASH_BUDDY_ROOT/lib/maven_utils.sh"

################################################################################
# ci build logic
################################################################################

readonly default_build_jdk_version=21
# shellcheck disable=SC2034
readonly JDK_VERSIONS=(
  8
  11
  17
  "$default_build_jdk_version"
  22
)

# here use `install` and `-D performRelease` intended
#   to check release operations.
#
# De-activate a maven profile from command line
#   https://stackoverflow.com/questions/25201430
#
# shellcheck disable=SC2034
readonly MVU_MVN_OPTS=(
  "${MVU_DEFAULT_MVN_OPTS[@]}"
  -DperformRelease -P'!gen-sign' -P'!enforce-project-version-when-release'
  ${CI_MORE_MVN_OPTS:+${CI_MORE_MVN_OPTS}}
)

cd ..

########################################
# build and test by default version jdk
########################################

jvu::switch_to_jdk "$default_build_jdk_version"

cu::log_then_run scripts/gen_CffuApiCompatibilityTest.sh

cu::head_line_echo "build and test with Java $default_build_jdk_version: $JAVA_HOME"
mvu::mvn_cmd clean install

########################################
# test by multiply version jdks
########################################

readonly KT_VERSION_FOR_JAVA8=1.6.0
readonly KT_VERSION_FOR_JAVA11=1.7.0
readonly KT_VERSION_FOR_JAVA17=1.8.0

# about CI env var
#   https://docs.github.com/en/actions/learn-github-actions/variables#default-environment-variables
if [ "${CI:-}" = true ]; then
  readonly CI_MORE_BEGIN_OPTS=jacoco:prepare-agent CI_MORE_END_OPTS=jacoco:report
fi

for jdk_version in "${JDK_VERSIONS[@]}"; do
  # skip default jdk, already tested above
  [ "$jdk_version" = "$default_build_jdk_version" ] && continue

  jvu::switch_to_jdk "$jdk_version"

  # just test without build
  cu::head_line_echo "test with Java $jdk_version: $JAVA_HOME"

  kt_version_var_name="KT_VERSION_FOR_JAVA${jdk_version}"
  kt_version_opt="${!kt_version_var_name:+-Dkotlin.version=${!kt_version_var_name}}"

  # skip kotlin module test for low java version(19-)
  # need recompile and test later(more info see the comments)
  pl=
  if ((jdk_version < default_build_jdk_version && jdk_version < 19)); then
    pl='-pl cffu-core,cffu-ttl-executor-wrapper'
  fi

  mvu::mvn_cmd ${pl:-} ${CI_MORE_BEGIN_OPTS:-} dependency:properties surefire:test ${CI_MORE_END_OPTS:-} $kt_version_opt
done

# test the kotlin extension methods works
#
# CAUTION: MUST recompile the client sources(test codes) by Java 8
#   Extensions are resolved statically.
#   If a class has a member function, and an extension function is defined
#     which has the same receiver type, the same name, and is applicable to given arguments,
#   the member always wins
#   https://kotlinlang.org/docs/extensions.html#extensions-are-resolved-statically
#
# RECOMPILE cffu-kotlin and run test

cu::head_line_echo "recompile and test cffu-kotlin with Java 8: $JAVA_HOME"

cd cffu-kotlin
rm -rf target/*test*
jvu::switch_to_jdk 8
mvu::mvn_cmd -P'!gen-git-properties' -Dmaven.main.skip -Denforcer.skip ${CI_MORE_BEGIN_OPTS:-} dependency:properties test-compile surefire:test ${CI_MORE_END_OPTS:-}

for jdk_version in "${JDK_VERSIONS[@]}"; do
  # skip default jdk, already tested above
  ((jdk_version == 8)) && continue

  jvu::switch_to_jdk "$jdk_version"

  # just test without build
  cu::head_line_echo "test cffu-kotlin with Java $jdk_version: $JAVA_HOME"

  kt_version_var_name="KT_VERSION_FOR_JAVA${jdk_version}"
  kt_version_opt="${!kt_version_var_name:+-Dkotlin.version=${!kt_version_var_name}}"

  mvu::mvn_cmd -Dmaven.main.skip -Denforcer.skip ${CI_MORE_BEGIN_OPTS:-} dependency:properties surefire:test ${CI_MORE_END_OPTS:-} $kt_version_opt
done
